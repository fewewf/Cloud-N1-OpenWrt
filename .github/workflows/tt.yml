name: Cloud N1 chat

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  SCRIPT_SH: script.sh
  CONFIG_SH: config.sh
  FILES: N1/files
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  KERNEL_VERSION: 6.6.76

jobs:
  build_openwrt:
    name: Build OpenWrt and release
    runs-on: ubuntu-latest

    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: Checkout Source Code
      uses: actions/checkout@v4
      with:
        ref: main

    - name: Display Disk Space
      run: df -h

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-mark hold grub-efi-amd64-signed
        sudo apt-get update --fix-missing -qq
        sudo apt-get full-upgrade -qq
        sudo apt-get install -qq ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools \
          python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "$TZ"

    - name: Clone OpenWrt Source Code
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "useVersionInfo=$(git show -s --date=short --format='date: %cd\ncommit: %s\ncommit hash: %H')" >> $GITHUB_ENV
        echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "tag_name=$(date +%Y%m%d)" >> $GITHUB_ENV

    - name: Update Feeds
      run: |
        [ -e files ] && mv files openwrt/files
        chmod +x $SCRIPT_SH
        ./$SCRIPT_SH
        cd openwrt
        echo "src-git helloworld https://github.com/fw876/helloworld.git" >> feeds.conf.default
        ./scripts/feeds update -a
        sed -i 's/TARGET_CFLAGS += -DHAVE_MAP_SYNC/TARGET_CFLAGS += -DHAVE_MAP_SYNC -D_LARGEFILE64_SOURCE/' feeds/packages/utils/xfsprogs/Makefile
        ./scripts/feeds update -a

    - name: Install Feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        chmod +x $CONFIG_SH
        ./$CONFIG_SH

    - name: Download Packages
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the Firmware
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
        df -h
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        rm -rf ./build_dir

    - name: Package Armvirt as OpenWrt
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        PACKAGE_SOC: s905d
        KERNEL_VERSION: ${{ env.KERNEL_VERSION }}
        WHOAMI: test
        KERNEL_AUTO_LATEST: true

    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages *.manifest sha256sums version.buildinfo feeds.buildinfo *.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success'
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} ❤️ | N1-OpenWrt 自动编译打包
        allowUpdates: true
        tag: ${{ env.tag_name }}
        commit: main
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          编译使用版本:
          ${{ env.useVersionInfo }}

          刷机固件简介：
            打包日期：${{ env.PACKAGED_OUTPUTDATE }}
            内核版本：${{ env.KERNEL_VERSION }}
            默认IP：192.168.1.1 默认用户名密码： root/password
        artifacts: "${{ env.FIRMWARE }}/*.*"

    - name: Remove Old Releases
      uses: dev-drprasad/delete-older-releases@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        keep_latest: 1
        delete_tags: true

    - name: Delete Old Workflow Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 0
